{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "express = require('express')\nmongoose = require('mongoose')\ncors = require('cors')\nbcrypt = require('bcrypt')\n\nuserAuth = require('./utils/config-wrapper').userAuth\nsecretKey = require('./utils/config-wrapper').secretKey\nlist_routes = require('./utils/config-wrapper').list_routes\nnormal_routes = require('./utils/config-wrapper').normal_routes\napp_routes = require('./utils/config-wrapper').app_routes\nlist_methods = require('./utils/config-wrapper').list_methods\nnormal_methods = require('./utils/config-wrapper').normal_methods\nroute_methods = require('./utils/config-wrapper').route_methods\n\nserverPort = require('./utils/config-wrapper').serverPort || process.env.PORT\ncorsPort = require('./utils/config-wrapper').corsPort\nmongoosePort = require('./utils/config-wrapper').mongoosePort\ndatabaseName = require('./utils/config-wrapper').databaseName\n\nobjOmit = require('./utils/data-api-functions').objOmit\nschemaAsync = require('./utils/data-api-functions').schemaAsync\nupdateQuery = require('./utils/data-api-functions').updateQuery\nresponseFormat = require('./utils/data-api-functions').responseFormat\nincorrectSecretKey = require('./utils/data-api-functions').incorrectSecretKey\nincorrectUserOrPass = require('./utils/data-api-functions').incorrectUserOrPass\nuserNotFound = require('./utils/data-api-functions').userNotFound\nnoCurrentPass = require('./utils/data-api-functions').noCurrentPass\nallowedPassword = require('./utils/data-api-functions').allowedPassword\nsignToken = require('./utils/data-api-functions').signToken\nverifyToken = require('./utils/data-api-functions').verifyToken\n\n#: MongoDB Config\n\ndb = mongoose.connect(\"mongodb://localhost:#{mongoosePort}/#{databaseName}\",\n\tuseNewUrlParser: true,\n\tuseCreateIndex: true,\n\tuseFindAndModify: false\n)\n\n#: Express Config\n\napp = express()\n\napp.use(cors(\n\torigin: \"http://localhost:#{corsPort}\",\n\texposedHeaders: [ 'X-Access-Token' ],\n))\n\napp.listen(serverPort, => console.log \"Listening on port #{serverPort}\")\n\n#: All Routes\n\napp.all(\"/:path(#{Object.keys(app_routes).join('|')})/:method(#{normal_methods.join('|')})\",\n\tverifyToken, (req, res) =>\n\n\t\tmodel = app_routes[req.params.path].model\n\t\tprimary_key = app_routes[req.params.path].primary_key\n\n\t\t#: Insert\n\n\t\tif req.params.method == 'insert'\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.create.bind(model),\n\t\t\t\t[req.query], req, res)\n\n\t\t#: Update\n\n\t\telse if req.params.method == 'update'\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.updateOne.bind(model),\n\t\t\t\t[{ [primary_key]: req.query[primary_key] },\n\t\t\t\t\t\tupdateQuery(req, primary_key)], req, res)\n\n\t\t#: Delete\n\n\t\telse if req.params.method == 'delete'\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.deleteOne.bind(model),\n\t\t\t\t[{ [primary_key]: req.query[primary_key] }], req, res)\n\n\t\t#: Delete All\n\n\t\telse if req.params.method == 'delete_all'\n\t\t\tawait responseFormat(model.deleteMany.bind(model), [{}], req, res)\n\n\t\t#: Get\n\n\t\telse if req.params.method == 'get'\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.find.bind(model),\n\t\t\t\t[{ [primary_key]: req.query[primary_key] }], req, res)\n\n\t\t#: Get All\n\n\t\telse if req.params.method == 'get_all'\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.find.bind(model),\n\t\t\t\t[{}], req, res)\n\n\t\t#: Get Schema Info\n\n\t\telse if req.params.method == 'schema'\n\t\t\tawait responseFormat(schemaAsync, [model, primary_key], req, res)\n\n\t\t#: Sterilize\n\n\t\telse if req.params.method == 'sterilize'\n\t\t\tunset_dict = {}\n\t\t\tfields = req.query.fields.split ','\n\t\t\tfor field in fields\n\t\t\t\tunset_dict[field] = 1;\n\t\t\tawait responseFormat(\n\t\t\t\tmodel.updateMany.bind(model),\n\t\t\t\t[{}, { $unset:unset_dict },\n\t\t\t\t{ multi: true, strict: false }],\n\t\t\t\treq, res)\n)\n\n#: List Routes\n\napp.all(\"/:path(#{Object.keys(list_routes).join('|')})/:method(#{list_methods.join('|')})\",\n\tverifyToken, (req, res) =>\n\n\t\tmodel = app_routes[req.params.path].model;\n\t\tprimary_key = app_routes[req.params.path].primary_key;\n\n\t\tif ['push', 'push_unique', 'set'].includes req.params.method\n\t\t\tupdate_dict = {};\n\t\t\tfor key of req.query\n\t\t\t\tif ![primary_key, 'auth_token', 'refresh_token'].includes key\n\t\t\t\t\tupdate_dict[key] = $each: req.query[key].split(',')\n\n\t\t\t#: Push\n\n\t\t\tif req.params.method == 'push'\n\t\t\t\tawait responseFormat(\n\t\t\t\t\tmodel.updateOne.bind(model),\n\t\t\t\t\t[{ [primary_key]: req.query[primary_key] },\n\t\t\t\t\t{ $push: update_dict }], req, res)\n\n\t\t\t#: Push Unique\n\n\t\t\telse if req.params.method == 'push_unique'\n\t\t\t\tawait responseFormat(\n\t\t\t\t\tmodel.updateOne.bind(model),\n\t\t\t\t\t[{ [primary_key]: req.query[primary_key] },\n\t\t\t\t\t{ $addToSet: update_dict }], req, res)\n\n\t\t\t#: Set\n\n\t\t\telse if req.params.method == 'set'\n\t\t\t\tawait responseFormat(\n\t\t\t\t\tmodel.updateOne.bind(model),\n\t\t\t\t\t[{ [primary_key]: req.query[primary_key] },\n\t\t\t\t\t{ $set: update_dict }], req, res)\n)\n\n#: Login\n\napp.all('/login', (req, res) =>\n\n\ttry\n\t\tuser = await userAuth.findOne username: req.query.username\n\t\tif user\n\t\t\tpass_match = await bcrypt.compare req.query.password, user.password\n\t\t\tif !pass_match\n\t\t\t\treturn incorrectUserOrPass res\n\t\t\telse\n\t\t\t\ttoken = signToken user\n\t\t\t\treturn res.json status: 'ok', response: token\n\t\telse\n\t\t\treturn userNotFound res\n\tcatch error\n\t\treturn res.status(500).json(\n\t\t\tstatus: 'error'\n\t\t\tresponse: error\n\t\t)\n)\n\n#: Sign Up\n\napp.all('/:path(signup)', verifyToken, (req, res) =>\n\n\ttry\n\t\tif req.query.secret_key?\n\n\t\t\tkey = await secretKey.find {}\n\t\t\tif key.length > 0\n\t\t\t\tkey_match = await bcrypt.compare req.query.secret_key, key[key.length - 1].key\n\t\t\t\tif !key_match\n\t\t\t\t\treturn incorrectSecretKey(res);\n\n\t\t\tallowedPassword req, res\n\t\t\tresponse = await userAuth.create req.query\n\n\t\t\tif req.query.username == response.username\n\t\t\t\ttoken = signToken(response)\n\t\t\t\treturn res.json(\n\t\t\t\t\tstatus: 'ok'\n\t\t\t\t\tresponse: token\n\t\t\t\t)\n\t\t\telse\n\t\t\t\treturn res.status(401).json(\n\t\t\t\t\tstatus: 'error'\n\t\t\t\t\tresponse: response\n\t\t\t\t)\n\n\t\telse\n\t\t\treturn res.status(401).json(\n\t\t\t\tstatus: 'error'\n\t\t\t\tresponse:\n\t\t\t\t\tmessage: 'Not Authorized.'\n\t\t\t)\n\n\tcatch error\n\t\treturn res.status(500).json(\n\t\t\tstatus: 'error'\n\t\t\tresponse: error\n\t\t)\n)\n\n#: Update Password\n\napp.all('/update_password', (req, res) =>\n\n\ttry\n\t\tuser = await userAuth.findOne username: req.query.username\n\n\t\tif user && req.query.current_password?\n\t\t\tpass_match = await bcrypt.compare req.query.current_password, user.password\n\t\t\tif !pass_match\n\t\t\t\treturn incorrectUserOrPass res\n\t\telse if !user\n\t\t\treturn userNotFound res\n\t\telse if !req.query.current_password?\n\t\t\treturn noCurrentPass res\n\n\t\tallowedPassword req, res\n\t\tpass_update = await userAuth.updateOne(\n\t\t\t{ username: req.query.username },\n\t\t\tobjOmit(req.query, ['username']))\n\n\t\tif pass_update.nModified == 1\n\t\t\treturn res.json(\n\t\t\t\tstatus: 'ok'\n\t\t\t\tresponse:\n\t\t\t\t\tmessage: 'Password updated.'\n\t\t\t\t)\n\t\telse\n\t\t\treturn res.status(401).json(\n\t\t\t\tstatus: 'error'\n\t\t\t\tresponse: pass_update\n\t\t\t)\n\tcatch error\n\t\treturn res.status(500).json(\n\t\t\tstatus: 'error'\n\t\t\tresponse: error\n\t\t)\n)\n\n#: Verify Token\n\napp.all('/verify_token', verifyToken, (req, res) =>\n\tif res.locals.refresh_token?\n\t\treturn res.json(\n\t\t\tstatus: 'ok',\n\t\t\trefresh_token: res.locals.refresh_token\n\t\t\tresponse:\n\t\t\t\tmessage: 'Token verified.'\n\t\t)\n\telse\n\t\treturn res.json(\n\t\t\tstatus: 'ok'\n\t\t\tresponse:\n\t\t\t\tmessage: 'Token verified.'\n\t\t)\n)\n\n#: Exports\n\nmodule.exports =\n\tpath: '/api'\n\thandler: app"
  ]
}