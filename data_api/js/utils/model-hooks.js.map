{
  "version": 3,
  "file": "model-hooks.js",
  "sourceRoot": "../../src/utils/",
  "sources": [
    "model-hooks.coffee"
  ],
  "names": [],
  "mappings": "AAAA,IAAA,gBAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA;;AAAA,MAAA,GAAS,OAAA,CAAQ,QAAR;;AACT,gBAAA,GAAmB,GADnB;;;AAKA,UAAA,GAAa,QAAA,CAAC,GAAD,EAAM,MAAN,CAAA;AACZ,MAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;AAAA;IACC,KAAA,wCAAA;;MACC,IAAA,GAAO,GAAI,CAAA,KAAA,CAAO,CAAA,CAAA,CAAE,CAAC,KAAd,CAAoB,GAApB;MACP,GAAI,CAAA,KAAA,CAAJ,GAAa;MACb,KAAA,wCAAA;;QACC,GAAI,CAAA,KAAA,CAAM,CAAC,IAAX,CAAgB,GAAhB;MADD;IAHD,CADD;GAAA,cAAA;IAMM;AACL,WAAO,OAAO,CAAC,OAAR,CACN;MAAA,OAAA,EAAS,kCAAT;MACA,QAAA,EAAU;IADV,CADM,EAPR;;AAUA,SAAO,OAAO,CAAC,OAAR,CAAgB,GAAhB;AAXK,EALb;;;AAoBA,WAAA,GAAc,MAAA,QAAA,CAAC,GAAD,EAAM,GAAN,CAAA;AACb,MAAA,KAAA,EAAA;EAAA,IAAG,CAAC,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAD,IAAyB,CAAC,GAAG,CAAC,KAAjC;AACC,WADD;;AAEA;IACC,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,OAAP,CAAe,gBAAf,CAAN;IACP,GAAI,CAAA,GAAA,CAAJ,GAAW,CAAA,MAAM,MAAM,CAAC,IAAP,CAAY,GAAI,CAAA,GAAA,CAAhB,EAAsB,IAAtB,CAAN,EAFZ;GAAA,cAAA;IAGM;AACL,WAAO;MACN,OAAA,EAAS,mCADH;MAEN,QAAA,EAAU;IAFJ,EAJR;;AAQA,SAAO;AAXM,EApBd;;;AAmCA,aAAA,GAAgB,MAAA,QAAA,CAAC,KAAD,EAAQ,GAAR,CAAA;AACf,MAAA,KAAA,EAAA;AAAA;IACC,IAAA,GAAO,CAAA,MAAM,MAAM,CAAC,OAAP,CAAe,gBAAf,CAAN;IACP,KAAM,CAAA,GAAA,CAAN,GAAa,CAAA,MAAM,MAAM,CAAC,IAAP,CAAY,KAAM,CAAA,GAAA,CAAlB,EAAwB,IAAxB,CAAN,EAFd;GAAA,cAAA;IAGM;AACL,WAAO;MACN,OAAA,EAAS,mCADH;MAEN,QAAA,EAAU;IAFJ,EAJR;;AAQA,SAAO;AATQ,EAnChB;;;AAgDA,MAAM,CAAC,OAAP,GACC;EAAA,UAAA,EAAY,UAAZ;EACA,WAAA,EAAa,WADb;EAEA,aAAA,EAAe;AAFf;;AAjDD",
  "sourcesContent": [
    "bcrypt = require('bcrypt')\nSALT_WORK_FACTOR = 10\n\n#: Pre-Save hook to save CSV lists for array fields\n\nlistCreate = (doc, fields) ->\n\ttry\n\t\tfor field in fields\n\t\t\tvals = doc[field][0].split(',')\n\t\t\tdoc[field] = []\n\t\t\tfor val in vals\n\t\t\t\tdoc[field].push(val)\n\tcatch error\n\t\treturn Promise.resolve\n\t\t\tmessage: 'Could not set array field value.'\n\t\t\terrorMsg: error\n\treturn Promise.resolve doc\n\n#: Pre-Save hook to encrypt field\n\nsaveEncrypt = (doc, key) ->\n\tif !doc.isModified(key) and !doc.isNew\n\t\treturn\n\ttry\n\t\tsalt = await bcrypt.genSalt SALT_WORK_FACTOR\n\t\tdoc[key] = await bcrypt.hash doc[key], salt\n\tcatch error\n\t\treturn {\n\t\t\tmessage: 'Could not create encrypted field.'\n\t\t\terrorMsg: error\n\t\t}\n\treturn doc\n\n#: Pre-Update hook to encrypt field\n\nupdateEncrypt = (query, key) ->\n\ttry\n\t\tsalt = await bcrypt.genSalt SALT_WORK_FACTOR\n\t\tquery[key] = await bcrypt.hash query[key], salt\n\tcatch error\n\t\treturn {\n\t\t\tmessage: 'Could not update encrypted field.'\n\t\t\terrorMsg: error\n\t\t}\n\treturn query\n\n#: Exports\n\nmodule.exports =\n\tlistCreate: listCreate\n\tsaveEncrypt: saveEncrypt\n\tupdateEncrypt: updateEncrypt\n\n#::: End Program :::"
  ]
}